(* The package `REAP' is written for Mathematica 7 and is distributed under the
terms of GNU Public License http://www.gnu.org/copyleft/gpl.html *)





BeginPackage["REAP`RGEMSSM`",{"REAP`RGESymbol`", "REAP`RGESolver`","REAP`RGEUtilities`","REAP`RGETakagi`", "REAP`RGEParameters`","REAP`RGEInitial`","MixingParameterTools`MPT3x3`",
"REAP`RGESM`","REAP`RGEMSSM0N`","REAP`RGESM0N`","REAP`RGE2HDM`","REAP`RGE2HDM0N`"(* transtions to these models are possible *)
}];

(* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! package depends on RGESM.m !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*)
(* dependencies are marked by !!! in the file *)


<PERL>
my $modelname="MSSM";

my %OutFunc=( "RGERaw"=>"GetRawSolution",
	   "RGEM\\[Nu]r"=>"GetM\\[Nu]r",
	   "RGEAll"=>"GetSolution",
	   "RGEM\\[Nu]"=>"GetM\\[Nu]",
	   "RGEMe"=>"GetMe",
	   "RGEMu"=>"GetMu",
	   "RGEMd"=>"GetMd",
	   "RGECoupling"=>"GetCoupling",
	   "RGE\\[Alpha]"=>"Get\\[Alpha]",
	   "RGERawM\\[Nu]r"=>"GetRawM\\[Nu]r",
	   "RGERawY\\[Nu]"=>"GetRawY\\[Nu]",
	   "RGE\\[Kappa]"=>"Get\\[Kappa]",
	   "RGEY\\[Nu]"=>"GetY\\[Nu]",
	   "RGEYe"=>"GetYe",
	   "RGEYu"=>"GetYu",
	   "RGEYd"=>"GetYd",
	   "RGEMixingParameters"=>"GetMixingParameters",
	   "RGETwistingParameters"=>"GetTwistingParameters",
	   "RGEM1Tilde"=>"GetM1Tilde",
	   "RGE\\[Epsilon]1Max"=>"Get\\[Epsilon]1Max",
	   "RGE\\[Epsilon]1"=>"Get\\[Epsilon]1",
	   "RGE\\[Epsilon]Max"=>"Get\\[Epsilon]Max",
	   "RGE\\[Epsilon]"=>"Get\\[Epsilon]",
	   "RGEPoleMTop"=>"GetPoleMTop",
	   );

my %TransFunc=(
		"SM"=>"TransSM",
		"SM0N"=>"TransSM0N",
		"MSSM"=>"TransMSSM",
		"MSSM0N"=>"TransMSSM0N",
		"2HDM"=>"Trans2HDM",
		"2HDM0N"=>"Trans2HDM0N",
	     );

RegisterModel($modelname,%OutFunc, %TransFunc);

print "

Begin[\"`Private`\"];
Map[Needs,{\"REAP`RGESymbol`\", \"REAP`RGESolver`\",\"REAP`RGEUtilities`\",\"REAP`RGETakagi`\", \"REAP`RGEParameters`\",\"REAP`RGEInitial`\",\"MixingParameterTools`MPT3x3`\",\"REAP`RGESM`\",\"REAP`RGEMSSM0N`\",\"REAP`RGESM0N`\",\"REAP`RGE2HDM`\",\"REAP`RGE2HDM0N`\"}];

ModelName=\"$modelname\";
ModelVariants={\"1Loop\",\"2Loop\"};
RGE={RGE1Loop,RGE2Loop};

";

OutputFunctions($modelname,"RGEOutput.cxml",%OutFunc);
Functions($modelname,"RGEFunctions.cxml");
</PERL>

(* definitions for the Minimal Supersymmetric Standard Model (MSSM) *)

ClearAll[RGEOptions];
RGEOptions;
Options[RGEOptions]={   RGEModelVariant->"1Loop", (* different variation of the model *)
			  RGEAutoGenerated->False, (* used to find automatically generated entries *)
			RGEPrecision->6, (* precision to find transitions *)
                        RGEMaxNumberIterations->20, (* maximum number of iterations in the loops to search transitions *)
                        RGEvEW->246, (* vev of the SM Higgs *)
                        RGEtan\[Beta]->50, (* tan \[Beta]=vu/vd *)  
                        RGEIntegratedOut->0, (* number of the integrated out neutrinos *)
			Method->StiffnessSwitching, (* option of NDSolve *)
			RGE\[CapitalGamma]d -> DiagonalMatrix[{0, 0, 0}], 
			RGE\[CapitalGamma]e -> DiagonalMatrix[{0, 0, 0}],
			RGESearchTransition->True, (* enables/disables the automatic search for transitions *)
                        RGEThresholdFactor->1 (* neutrinos are integrated out at RGEThresholdFactor*Mass *)
			}; (* options of the model *)

                        
Parameters={g1,g2,g3,Yu,Yd,Ye,Y\[Nu],\[Kappa],M\[Nu]r};
ParameterSymbols={RGEg1,RGEg2,RGEg3,RGEYu,RGEYd,RGEYe,RGEY\[Nu],RGE\[Kappa],RGEM\[Nu]r};

ClearAll[Initial];
Initial={
{"GUT",{
	RGEg1->0.7044110331165641,
	RGEg2->0.6965468498179075,
	RGEg3->0.6983661130877465,
	RGEYd->RGEGetYd[RGEyd,RGEys,RGEyb,RGEq\[Theta]12,RGEq\[Theta]13,RGEq\[Theta]23,RGEq\[Delta],RGEq\[Delta]e,RGEq\[Delta]\[Mu],RGEq\[Delta]\[Tau],RGEq\[CurlyPhi]1,RGEq\[CurlyPhi]2],
	RGEYu->DiagonalMatrix[{RGEyu,RGEyc,RGEyt}],
	RGE\[Kappa]->0*IdentityMatrix[3],
	RGEM\[Nu]r->RGEGetM[RGE\[Theta]12,RGE\[Theta]13,RGE\[Theta]23,RGE\[Delta],RGE\[Delta]e,RGE\[Delta]\[Mu],RGE\[Delta]\[Tau],RGE\[CurlyPhi]1,RGE\[CurlyPhi]2,RGEMlightest,RGE\[CapitalDelta]m2atm,RGE\[CapitalDelta]m2sol,RGEMassHierarchy,RGEvu,RGEY\[Nu]],
	RGEq\[Theta]12 -> 12.651 Degree,
	RGEq\[Theta]13 -> 0.147249 Degree, 
	RGEq\[Theta]23 -> 1.82387 Degree,
	RGEq\[Delta] -> 293.06 Degree,
	RGEq\[CurlyPhi]1 -> 0 Degree,
	RGEq\[CurlyPhi]2 -> 0 Degree, 
	RGEq\[Delta]e -> 0 Degree,
	RGEq\[Delta]\[Mu] -> 0 Degree,
	RGEq\[Delta]\[Tau] -> 0 Degree,
	RGEMassHierarchy -> "n",
	RGE\[Theta]12 -> 27 Degree,
	RGE\[Theta]13 -> 0 Degree, 
	RGE\[Theta]23 -> 45 Degree,
	RGE\[Delta] -> 0 Degree,
	RGE\[Delta]e -> 0 Degree,
	RGE\[Delta]\[Mu] -> 0 Degree,
	RGE\[Delta]\[Tau] -> 0 Degree,
	RGE\[CurlyPhi]1 -> 0 Degree,
	RGE\[CurlyPhi]2 -> 0 Degree, 
	RGEMlightest -> 0.02,
	RGE\[CapitalDelta]m2atm -> 4*10^-3, 
	RGE\[CapitalDelta]m2sol -> 1.6 10^-4,
	RGEY\[Nu]33 -> 0.5,
	RGEY\[Nu]Ratio -> 0.1,
	RGEY\[Nu]->RGEGetY\[Nu][RGEY\[Nu]33,RGEY\[Nu]Ratio],
	RGEYe->DiagonalMatrix[{RGEye,RGEy\[Mu],RGEy\[Tau]}],
	RGEyu -> 0.00104/RGEvu*Sqrt[2],
	RGEyc -> 0.302/RGEvu*Sqrt[2],
	RGEyt -> 129/RGEvu*Sqrt[2],
	RGEyd -> 0.00133/RGEvd*Sqrt[2],
	RGEys -> 0.0265/RGEvd*Sqrt[2],
	RGEyb ->  1.00/RGEvd*Sqrt[2],
	RGEye -> 0.32502032*10^-3*Sqrt[2]/RGEve,
	RGEy\[Mu] -> 68.59813*10^-3*Sqrt[2]/RGEve,
	RGEy\[Tau] -> 1171.4*10^-3*Sqrt[2]/RGEve
}
},
{"MZ",{
	RGE\[Kappa] -> 0*IdentityMatrix[3], 
	RGEYe->DiagonalMatrix[{RGEye,RGEy\[Mu],RGEy\[Tau]}],
	RGEY\[Nu]33 -> 0.1,
	RGEY\[Nu]Ratio -> 0.5,
	RGEY\[Nu]->RGEGetY\[Nu][RGEY\[Nu]33,RGEY\[Nu]Ratio],
	RGEM\[Nu]r->RGEGetM[RGE\[Theta]12,RGE\[Theta]13,RGE\[Theta]23,RGE\[Delta],RGE\[Delta]e,RGE\[Delta]\[Mu],RGE\[Delta]\[Tau],RGE\[CurlyPhi]1,RGE\[CurlyPhi]2,RGEMlightest,RGE\[CapitalDelta]m2atm,RGE\[CapitalDelta]m2sol,RGEMassHierarchy,RGEvu,RGEY\[Nu]],
	RGEg1 -> RGEgMZ[1],
	RGEg2 -> RGEgMZ[2],
	RGEg3 -> RGEgMZ[3],
	RGE\[Lambda] -> 0.5,
	RGEYd->RGEGetYd[RGEyd,RGEys,RGEyb,RGEq\[Theta]12,RGEq\[Theta]13,RGEq\[Theta]23,RGEq\[Delta],RGEq\[Delta]e,RGEq\[Delta]\[Mu],RGEq\[Delta]\[Tau],RGEq\[CurlyPhi]1,RGEq\[CurlyPhi]2],
	RGEYu->DiagonalMatrix[{RGEyu,RGEyc,RGEyt}],
	RGEq\[Theta]12 -> 12.7652 Degree, 
	RGEq\[Theta]13 -> 0.170675 Degree,
	RGEq\[Theta]23 -> 2.14069 Degree,
	RGEq\[Delta] -> 0 Degree,
	RGEq\[CurlyPhi]1 -> 0 Degree,
	RGEq\[CurlyPhi]2 -> 0 Degree, 
	RGEq\[Delta]e -> 0 Degree,
	RGEq\[Delta]\[Mu] -> 0 Degree,
	RGEq\[Delta]\[Tau] -> 0 Degree,
	RGEyu -> 2.33*10^-3*Sqrt[2]/RGEvu,
	RGEyc -> 0.677*Sqrt[2]/RGEvu,
	RGEyt -> 172.7*Sqrt[2]/RGEvu,
	RGEyd -> 4.69*10^-3*Sqrt[2]/RGEvd,
	RGEys -> 93.4*10^-3*Sqrt[2]/RGEvd,
	RGEyb -> 3.00*Sqrt[2]/RGEvd,
	RGEye -> 0.48684727*10^-3*Sqrt[2]/RGEve,
	RGEy\[Mu] -> 0.10275138*Sqrt[2]/RGEve,
	RGEy\[Tau] -> 1.7467*Sqrt[2]/RGEve,
	RGEMassHierarchy -> "n",
	RGE\[Theta]12 -> 33 Degree,
	RGE\[Theta]13 -> 0 Degree, 
	RGE\[Theta]23 -> 45 Degree,
	RGE\[Delta] -> 0 Degree,
	RGE\[Delta]e -> 0 Degree,
	RGE\[Delta]\[Mu] -> 0 Degree,
	RGE\[Delta]\[Tau] -> 0 Degree,
	RGE\[CurlyPhi]1 -> 0 Degree,
	RGE\[CurlyPhi]2 -> 0 Degree, 
	RGEMlightest -> 0.05,
	RGE\[CapitalDelta]m2atm -> 2.5 10^-3, 
	RGE\[CapitalDelta]m2sol -> 8 10^-5
	}
}

}; (* a list containing suggestions for initial values *)



ClearAll[RGE1Loop];
RGE1Loop:={	D[g1[t],t]==Betag1[g1[t],g2[t],g3[t],Yu[t],Yd[t],Ye[t],Y\[Nu][t],\[Kappa][t],M\[Nu]r[t]],
		D[g2[t],t]==Betag2[g1[t],g2[t],g3[t],Yu[t],Yd[t],Ye[t],Y\[Nu][t],\[Kappa][t],M\[Nu]r[t]],
		D[g3[t],t]==Betag3[g1[t],g2[t],g3[t],Yu[t],Yd[t],Ye[t],Y\[Nu][t],\[Kappa][t],M\[Nu]r[t]],
		D[Yu[t],t]==BetaYu[g1[t],g2[t],g3[t],Yu[t],Yd[t],Ye[t],Y\[Nu][t],\[Kappa][t],M\[Nu]r[t]],
		D[Yd[t],t]==BetaYd[g1[t],g2[t],g3[t],Yu[t],Yd[t],Ye[t],Y\[Nu][t],\[Kappa][t],M\[Nu]r[t]],
		D[Ye[t],t]==BetaYe[g1[t],g2[t],g3[t],Yu[t],Yd[t],Ye[t],Y\[Nu][t],\[Kappa][t],M\[Nu]r[t]],
		D[Y\[Nu][t],t]==BetaY\[Nu][g1[t],g2[t],g3[t],Yu[t],Yd[t],Ye[t],Y\[Nu][t],\[Kappa][t],M\[Nu]r[t]],
		D[\[Kappa][t],t]==Beta\[Kappa][g1[t],g2[t],g3[t],Yu[t],Yd[t],Ye[t],Y\[Nu][t],\[Kappa][t],M\[Nu]r[t]],
		D[M\[Nu]r[t],t]==BetaM\[Nu]r[g1[t],g2[t],g3[t],Yu[t],Yd[t],Ye[t],Y\[Nu][t],\[Kappa][t],M\[Nu]r[t]]
}; (* renormalization group equations of the MSSM ( 1 Loop ) *)



(* Beta functions of the MSSM *)
ClearAll[Betag1, Betag2, Betag3, BetaYu, BetaYd, BetaYe, BetaY\[Nu], Beta\[Kappa], BetaM\[Nu]r, Beta\[Lambda]];

(* 1 loop contributions *)

Betag1[g1_,g2_,g3_,Yu_,Yd_,Ye_,Y\[Nu]_,\[Kappa]_,M\[Nu]r_] :=
	(33/5) * 1/(16*Pi^2) * g1^3;

Betag2[g1_,g2_,g3_,Yu_,Yd_,Ye_,Y\[Nu]_,\[Kappa]_,M\[Nu]r_] :=
	(1) * 1/(16*Pi^2) * g2^3;

Betag3[g1_,g2_,g3_,Yu_,Yd_,Ye_,Y\[Nu]_,\[Kappa]_,M\[Nu]r_] :=
	(-3) * 1/(16*Pi^2) * g3^3;


BetaYd[g1_,g2_,g3_,Yu_,Yd_,Ye_,Y\[Nu]_,\[Kappa]_,M\[Nu]r_] := 1/(16*Pi^2) * (
          Yd.(
          + 3*Dagger[Yd].Yd
	  + Dagger[Yu].Yu
          )
          + (
          - (7/15)*g1^2
	  - 3*g2^2
	  - (16/3)*g3^2
	  + 3*Tr[Dagger[Yd].Yd]
	  + Tr[Dagger[Ye].Ye]
          )*Yd
          );

BetaYu[g1_,g2_,g3_,Yu_,Yd_,Ye_,Y\[Nu]_,\[Kappa]_,M\[Nu]r_] := 1/(16*Pi^2) * (
          Yu.(
          + Dagger[Yd].Yd
	  + 3*Dagger[Yu].Yu
          )
          + (
          - (13/15)*g1^2
	  - 3*g2^2
	  - (16/3)*g3^2
	  + Tr[Dagger[Y\[Nu]].Y\[Nu]]
	  + 3*Tr[Dagger[Yu].Yu]
          )*Yu
          );

BetaYe[g1_,g2_,g3_,Yu_,Yd_,Ye_,Y\[Nu]_,\[Kappa]_,M\[Nu]r_] := 1/(16*Pi^2) * (
          Ye.(
          + 3*Dagger[Ye].Ye
	  + Dagger[Y\[Nu]].Y\[Nu]
          )
          + (
          - (9/5)*g1^2
	  - 3*g2^2
	  + 3*Tr[Dagger[Yd].Yd]
	  + Tr[Dagger[Ye].Ye]
          )*Ye
          );

BetaY\[Nu][g1_,g2_,g3_,Yu_,Yd_,Ye_,Y\[Nu]_,\[Kappa]_,M\[Nu]r_] := 1/(16*Pi^2) * (
          Y\[Nu].(
          + Dagger[Ye].Ye
	  + 3*Dagger[Y\[Nu]].Y\[Nu]
          )
          + (
          - (3/5)*g1^2
	  - 3*g2^2
	  + Tr[Dagger[Y\[Nu]].Y\[Nu]]
	  + 3*Tr[Dagger[Yu].Yu]
          )*Y\[Nu]
          );

Beta\[Kappa][g1_,g2_,g3_,Yu_,Yd_,Ye_,Y\[Nu]_,\[Kappa]_,M\[Nu]r_] :=1/(16*Pi^2) * (
	\[Kappa].(
        + Dagger[Ye].Ye
        + Dagger[Y\[Nu]].Y\[Nu]
        )
	+ (
        + Transpose[Ye].Conjugate[Ye]
	+ Transpose[Y\[Nu]].Conjugate[Y\[Nu]]
        ).\[Kappa]
        + (
	- (6/5)*g1^2
	- 6*g2^2
	+ 6*Tr[Dagger[Yu].Yu]
        + 2*Tr[Dagger[Y\[Nu]].Y\[Nu]]
        )*\[Kappa]
        );

BetaM\[Nu]r[g1_,g2_,g3_,Yu_,Yd_,Ye_,Y\[Nu]_,\[Kappa]_,M\[Nu]r_] := 1/(16*Pi^2) * (
          2*M\[Nu]r.Conjugate[Y\[Nu]].Transpose[Y\[Nu]]
	  + 2*Y\[Nu].Dagger[Y\[Nu]].M\[Nu]r);




ClearAll[RGE2Loop];
RGE2Loop:={	D[g1[t],t]==Betag1[g1[t],g2[t],g3[t],Yu[t],Yd[t],Ye[t],Y\[Nu][t],\[Kappa][t],M\[Nu]r[t]]+Betag12[g1[t],g2[t],g3[t],Yu[t],Yd[t],Ye[t],Y\[Nu][t],\[Kappa][t],M\[Nu]r[t]],
		D[g2[t],t]==Betag2[g1[t],g2[t],g3[t],Yu[t],Yd[t],Ye[t],Y\[Nu][t],\[Kappa][t],M\[Nu]r[t]]+Betag22[g1[t],g2[t],g3[t],Yu[t],Yd[t],Ye[t],Y\[Nu][t],\[Kappa][t],M\[Nu]r[t]],
		D[g3[t],t]==Betag3[g1[t],g2[t],g3[t],Yu[t],Yd[t],Ye[t],Y\[Nu][t],\[Kappa][t],M\[Nu]r[t]]+Betag32[g1[t],g2[t],g3[t],Yu[t],Yd[t],Ye[t],Y\[Nu][t],\[Kappa][t],M\[Nu]r[t]],
		D[Yu[t],t]==BetaYu[g1[t],g2[t],g3[t],Yu[t],Yd[t],Ye[t],Y\[Nu][t],\[Kappa][t],M\[Nu]r[t]]+BetaYu2[g1[t],g2[t],g3[t],Yu[t],Yd[t],Ye[t],Y\[Nu][t],\[Kappa][t],M\[Nu]r[t]],
		D[Yd[t],t]==BetaYd[g1[t],g2[t],g3[t],Yu[t],Yd[t],Ye[t],Y\[Nu][t],\[Kappa][t],M\[Nu]r[t]]+BetaYd2[g1[t],g2[t],g3[t],Yu[t],Yd[t],Ye[t],Y\[Nu][t],\[Kappa][t],M\[Nu]r[t]],
		D[Ye[t],t]==BetaYe[g1[t],g2[t],g3[t],Yu[t],Yd[t],Ye[t],Y\[Nu][t],\[Kappa][t],M\[Nu]r[t]]+BetaYe2[g1[t],g2[t],g3[t],Yu[t],Yd[t],Ye[t],Y\[Nu][t],\[Kappa][t],M\[Nu]r[t]],
		D[Y\[Nu][t],t]==BetaY\[Nu][g1[t],g2[t],g3[t],Yu[t],Yd[t],Ye[t],Y\[Nu][t],\[Kappa][t],M\[Nu]r[t]]+BetaY\[Nu]2[g1[t],g2[t],g3[t],Yu[t],Yd[t],Ye[t],Y\[Nu][t],\[Kappa][t],M\[Nu]r[t]],
		D[\[Kappa][t],t]==Beta\[Kappa][g1[t],g2[t],g3[t],Yu[t],Yd[t],Ye[t],Y\[Nu][t],\[Kappa][t],M\[Nu]r[t]]+Beta\[Kappa]2[g1[t],g2[t],g3[t],Yu[t],Yd[t],Ye[t],Y\[Nu][t],\[Kappa][t],M\[Nu]r[t]],
		D[M\[Nu]r[t],t]==BetaM\[Nu]r[g1[t],g2[t],g3[t],Yu[t],Yd[t],Ye[t],Y\[Nu][t],\[Kappa][t],M\[Nu]r[t]]+BetaM\[Nu]r2[g1[t],g2[t],g3[t],Yu[t],Yd[t],Ye[t],Y\[Nu][t],\[Kappa][t],M\[Nu]r[t]]
}; (* renormalization group equations of the MSSM ( 2 Loop ) *)


ClearAll[Betag12, Betag22, Betag32,BetaYu2, BetaYd2, BetaYe2, BetaY\[Nu]2, Beta\[Kappa]2, BetaM\[Nu]r2];


(* 2 loop contributions *)
Betag12[g1_,g2_,g3_,Yu_,Yd_,Ye_,Y\[Nu]_,\[Kappa]_,M\[Nu]r_] := 1/(4*Pi)^4 * With[{
       a = 1,
       g = {g1,g2,g3},
       T = { Tr[Yu.Dagger[Yu]], Tr[Yd.Dagger[Yd]], Tr[Ye.Dagger[Ye]] },
       B = {{199/25, 27/5, 88/5}, {9/5, 25, 24}, {11/5, 9, 14}}, 
       c = {{26/5, 14/5, 18/5}, {6, 6, 2}, {4, 4, 0}}
   },
   g[[a]]^3 (
       Sum[ B[[a,b]] g[[b]]^2 , {b,3}] +
       - Sum[ c[[a,f]] T[[f]], {f,3}]
   )
];

Betag22[g1_,g2_,g3_,Yu_,Yd_,Ye_,Y\[Nu]_,\[Kappa]_,M\[Nu]r_] := 1/(4*Pi)^4 * With[{
       a = 2,
       g = {g1,g2,g3},
       T = { Tr[Yu.Dagger[Yu]], Tr[Yd.Dagger[Yd]], Tr[Ye.Dagger[Ye]] },
       B = {{199/25, 27/5, 88/5}, {9/5, 25, 24}, {11/5, 9, 14}}, 
       c = {{26/5, 14/5, 18/5}, {6, 6, 2}, {4, 4, 0}}
   },
   g[[a]]^3 (
       Sum[ B[[a,b]] g[[b]]^2 , {b,3}] +
       - Sum[ c[[a,f]] T[[f]], {f,3}]
   )
];

Betag32[g1_,g2_,g3_,Yu_,Yd_,Ye_,Y\[Nu]_,\[Kappa]_,M\[Nu]r_] := 1/(4*Pi)^4 * With[{
       a = 3,
       g = {g1,g2,g3},
       T = { Tr[Yu.Dagger[Yu]], Tr[Yd.Dagger[Yd]], Tr[Ye.Dagger[Ye]] },
       B = {{199/25, 27/5, 88/5}, {9/5, 25, 24}, {11/5, 9, 14}}, 
       c = {{26/5, 14/5, 18/5}, {6, 6, 2}, {4, 4, 0}}
   },
   g[[a]]^3 (
       Sum[ B[[a,b]] g[[b]]^2 , {b,3}] +
       - Sum[ c[[a,f]] T[[f]], {f,3}]
   )
];


BetaYu2[g1_,g2_,g3_,Yu_,Yd_,Ye_,Y\[Nu]_,\[Kappa]_,M\[Nu]r_] :=1/(4*Pi)^4 * (
	 + Yu.(
         - 2*Dagger[Yd].Yd.Dagger[Yd].Yd
	 - 2*Dagger[Yd].Yd.Dagger[Yu].Yu
	 - 4*Dagger[Yu].Yu.Dagger[Yu].Yu
	 - 3*Dagger[Yd].Yd*Tr[Yd.Dagger[Yd]]
	 - Dagger[Yd].Yd*Tr[Ye.Dagger[Ye]]
	 - 9*Dagger[Yu].Yu*Tr[Yu.Dagger[Yu]]
	 - 3*Dagger[Yu].Yu*Tr[Y\[Nu].Dagger[Y\[Nu]]]
         + (2/5)*g1^2*Dagger[Yd].Yd
	 + (2/5)*g1^2*Dagger[Yu].Yu
	 + 6*g2^2*Dagger[Yu].Yu
         )
         + Yu*(
	 - 3*Tr[Dagger[Yu].Yd.Dagger[Yd].Yu]
	 - 9*Tr[Dagger[Yu].Yu.Dagger[Yu].Yu]
	 - Tr[Y\[Nu].Dagger[Ye].Ye.Dagger[Y\[Nu]]]
	 - 3*Tr[Dagger[Y\[Nu]].Y\[Nu].Dagger[Y\[Nu]].Y\[Nu]]
         + (4/5)*g1^2*Tr[Dagger[Yu].Yu]
	 + 16*g3^2*Tr[Dagger[Yu].Yu]
         + (2743/450)*g1^4
         + g1^2*g2^2
	 + (15/2)*g2^4
	 + (136/45)*g1^2*g3^2
	 + 8*g2^2*g3^2
	 - (16/9)*g3^4
         )
         );


BetaYd2[g1_,g2_,g3_,Yu_,Yd_,Ye_,Y\[Nu]_,\[Kappa]_,M\[Nu]r_] :=1/(4*Pi)^4 * (
	+Yd.(
        - 4*Dagger[Yd].Yd.Dagger[Yd].Yd
	- 2*Dagger[Yu].Yu.Dagger[Yd].Yd
	- 2*Dagger[Yu].Yu.Dagger[Yu].Yu
	- 9*Dagger[Yd].Yd*Tr[Yd.Dagger[Yd]]
	- 3*Dagger[Yd].Yd*Tr[Ye.Dagger[Ye]]
	- Dagger[Yu].Yu*Tr[Y\[Nu].Dagger[Y\[Nu]]]
	- 3*Dagger[Yu].Yu*Tr[Yu.Dagger[Yu]]
	+ 6*Dagger[Yd].Yd*g2^2
	+ (4/5)*g1^2*Dagger[Yd].Yd
	+ (4/5)*g1^2*Dagger[Yu].Yu
        )
	+Yd*(
	- 9*Tr[Dagger[Yd].Yd.Dagger[Yd].Yd]
	- 3*Tr[Dagger[Yd].Yu.Dagger[Yu].Yd]
	- 3*Tr[Dagger[Ye].Ye.Dagger[Ye].Ye]
	- Tr[Ye.Dagger[Y\[Nu]].Y\[Nu].Dagger[Ye]]
        - (2/5)*g1^2*Tr[Dagger[Yd].Yd]
	+ (6/5)*g1^2*Tr[Dagger[Ye].Ye]
	+ 16*g3^2*Tr[Dagger[Yd].Yd]
        + (287/90)*g1^4
        + g1^2*g2^2
	+ (15/2)*g2^4
	+ (8/9)*g1^2*g3^2
	+ 8*g2^2*g3^2
	- (16/9)*g3^4
        )
        );


BetaYe2[g1_,g2_,g3_,Yu_,Yd_,Ye_,Y\[Nu]_,\[Kappa]_,M\[Nu]r_] :=1/(4*Pi)^4 * (
	+ Ye.(
        - 4*Dagger[Ye].Ye.Dagger[Ye].Ye
	- 2*Dagger[Y\[Nu]].Y\[Nu].Dagger[Ye].Ye
	- 2*Dagger[Y\[Nu]].Y\[Nu].Dagger[Y\[Nu]].Y\[Nu]
	- 9*Dagger[Ye].Ye*Tr[Yd.Dagger[Yd]]
	- 3*Dagger[Ye].Ye*Tr[Ye.Dagger[Ye]]
	- Dagger[Y\[Nu]].Y\[Nu]*Tr[Y\[Nu].Dagger[Y\[Nu]]]
	- 3*Dagger[Y\[Nu]].Y\[Nu]*Tr[Yu.Dagger[Yu]]
	+ 6*g2^2*Dagger[Ye].Ye
        )
        +Ye*(
	- 9*Tr[Dagger[Yd].Yd.Dagger[Yd].Yd]
	- 3*Tr[Dagger[Yd].Yu.Dagger[Yu].Yd]
	- 3*Tr[Dagger[Ye].Ye.Dagger[Ye].Ye]
	- Tr[Ye.Dagger[Y\[Nu]].Y\[Nu].Dagger[Ye]]
	+ (6/5)*g1^2*Tr[Dagger[Ye].Ye]
        - (2/5)*g1^2*Tr[Dagger[Yd].Yd]
	+ 16*g3^2*Tr[Dagger[Yd].Yd]
	+ (27/2)*g1^4
        + (9/5)*g1^2*g2^2
	+ (15/2)*g2^4
        )
        );


BetaY\[Nu]2[g1_,g2_,g3_,Yu_,Yd_,Ye_,Y\[Nu]_,\[Kappa]_,M\[Nu]r_] :=1/(4*Pi)^4 * (
	+ Y\[Nu].(
        - 2*Dagger[Ye].Ye.Dagger[Ye].Ye
	- 2*Dagger[Ye].Ye.Dagger[Y\[Nu]].Y\[Nu]
	- 4*Dagger[Y\[Nu]].Y\[Nu].Dagger[Y\[Nu]].Y\[Nu]
	- 3*Dagger[Ye].Ye*Tr[Yd.Dagger[Yd]]
	- Dagger[Ye].Ye*Tr[Ye.Dagger[Ye]]
	- 3*Dagger[Y\[Nu]].Y\[Nu]*Tr[Y\[Nu].Dagger[Y\[Nu]]]
	- 9*Dagger[Y\[Nu]].Y\[Nu]*Tr[Yu.Dagger[Yu]]
	+ (6/5)*g1^2*Dagger[Ye].Ye
	+ (6/5)*g1^2*Dagger[Y\[Nu]].Y\[Nu]
	+ 6*g2^2*Dagger[Y\[Nu]].Y\[Nu]
        )
        + Y\[Nu]*(
	- Tr[Y\[Nu].Dagger[Ye].Ye.Dagger[Y\[Nu]]]
	- 3*Tr[Dagger[Y\[Nu]].Y\[Nu].Dagger[Y\[Nu]].Y\[Nu]]
	- 3*Tr[Dagger[Yu].Yd.Dagger[Yd].Yu]
	- 9*Tr[Dagger[Yu].Yu.Dagger[Yu].Yu]
        + (4/5)*g1^2*Tr[Dagger[Yu].Yu]
	+ 16*g3^2*Tr[Dagger[Yu].Yu]
	+ (207/50)*g1^4
        + (9/5)*g1^2*g2^2
	+ (15/2)*g2^4
        )
        );


Beta\[Kappa]2[g1_,g2_,g3_,Yu_,Yd_,Ye_,Y\[Nu]_,\[Kappa]_,M\[Nu]r_] :=1/(4*Pi)^4 * (
	+ \[Kappa].(
        - 2*Dagger[Ye].Ye.Dagger[Ye].Ye
        - 2*Dagger[Y\[Nu]].Y\[Nu].Dagger[Y\[Nu]].Y\[Nu]
	- (Tr[Y\[Nu].Dagger[Y\[Nu]]]+3*Tr[Yu.Dagger[Yu]])*Transpose[Y\[Nu]].Conjugate[Y\[Nu]]
	+ ((6/5)*g1^2 - Tr[Ye.Dagger[Ye]]- 3*Tr[Yd.Dagger[Yd]])*Transpose[Ye].Conjugate[Ye]
        )
        + (
	- 2*Transpose[Ye].Conjugate[Ye].Transpose[Ye].Conjugate[Ye]
	- 2*Transpose[Y\[Nu]].Conjugate[Y\[Nu]].Transpose[Y\[Nu]].Conjugate[Y\[Nu]]
	- (Tr[Y\[Nu].Dagger[Y\[Nu]]]+3*Tr[Yu.Dagger[Yu]])*Transpose[Y\[Nu]].Conjugate[Y\[Nu]]
	+ ((6/5)*g1^2 - Tr[Ye.Dagger[Ye]]- 3*Tr[Yd.Dagger[Yd]])*Transpose[Ye].Conjugate[Ye]
        ).\[Kappa]
	+ \[Kappa]*(
	- 6*Tr[Dagger[Yu].Yd.Dagger[Yd].Yu]
	- 18*Tr[Dagger[Yu].Yu.Dagger[Yu].Yu]
	- 2*Tr[Y\[Nu].Dagger[Ye].Ye.Dagger[Y\[Nu]]]
	- 6*Tr[Dagger[Y\[Nu]].Y\[Nu].Dagger[Y\[Nu]].Y\[Nu]]
        + (8/5)*g1^2*Tr[Dagger[Yu].Yu]
	+ 32*g3^2*Tr[Dagger[Yu].Yu]
        + (207/25)*g1^4
	+ (18/5)*g1^2*g2^2
	+ 15*g2^4
        )
        );


BetaM\[Nu]r2[g1_,g2_,g3_,Yu_,Yd_,Ye_,Y\[Nu]_,\[Kappa]_,M\[Nu]r_] :=1/(4*Pi)^4 * (
	 + M\[Nu]r.(
         - 2*Conjugate[Y\[Nu]].Transpose[Ye].Conjugate[Ye].Transpose[Y\[Nu]]
	 - 2*Conjugate[Y\[Nu]].Transpose[Y\[Nu]].Conjugate[Y\[Nu]].Transpose[Y\[Nu]]
	 - 6*Tr[Yu.Dagger[Yu]]*Conjugate[Y\[Nu]].Transpose[Y\[Nu]]
	 - 2*Tr[Y\[Nu].Dagger[Y\[Nu]]]*Conjugate[Y\[Nu]].Transpose[Y\[Nu]]
	 + (6/5)*g1^2*Conjugate[Y\[Nu]].Transpose[Y\[Nu]]
	 + 6*g2^2*Conjugate[Y\[Nu]].Transpose[Y\[Nu]]
	 )
         + (
         - 2*Y\[Nu].Dagger[Ye].Ye.Dagger[Y\[Nu]]
	 - 2*Y\[Nu].Dagger[Y\[Nu]].Y\[Nu].Dagger[Y\[Nu]]
	 - 6*Tr[Yu.Dagger[Yu]]*Y\[Nu].Dagger[Y\[Nu]]
	 - 2*Tr[Y\[Nu].Dagger[Y\[Nu]]]*Y\[Nu].Dagger[Y\[Nu]]
	 + (6/5)*g1^2*Y\[Nu].Dagger[Y\[Nu]]
	 + 6*g2^2*Y\[Nu].Dagger[Y\[Nu]]
         ).M\[Nu]r
	 );

	  

(* transition functions *)

ClearAll[TransMSSM];
TransMSSM[pScale_?NumericQ,pDirection_?NumericQ,pSolution_,pToOpts_,pFromOpts_]:=Block[{lg1,lg2,lg3,lYu,lYd,lYe,lY\[Nu],lY\[Nu]Rotated,l\[Kappa],lM\[Nu]r,lM\[Nu]rRotated,lIntegrateOut, lUforM,lToIntegratedOut,lFromIntegratedOut},
(* make a transition from the MSSM to the MSSM *)

(* evaluate the options *)
(* evaluate IntegratedOut in pToOpts and pFromOpts *)
        lToOpts;
        Options[lToOpts]=Options[RGEOptions];
        SetOptions[lToOpts,RGEFilterOptions[lToOpts,pToOpts]];
	lToIntegratedOut=RGEIntegratedOut/.Options[lToOpts,RGEIntegratedOut];
        lFromOpts;
        Options[lFromOpts]=Options[RGEOptions];
        SetOptions[lFromOpts,RGEFilterOptions[lFromOpts,pFromOpts]];
	lFromIntegratedOut=RGEIntegratedOut/.Options[lFromOpts,RGEIntegratedOut];

(* calculate the new parameters *)
	{lg1,lg2,lg3,lYu,lYd,lYe,lY\[Nu],l\[Kappa],lM\[Nu]r}=(ParametersFunc[ pScale ]/.pSolution)[[1]];
	{lM\[Nu]rRotated,lY\[Nu]Rotated}=RGERotateM[ lM\[Nu]r,lY\[Nu] ]; (*rotation matrix for lM\[Nu]r*)

	If[lFromIntegratedOut>lToIntegratedOut,
	   (* Print["The model ", RGEGetModel[Exp[pScale]], " at the scale ",
	   Exp[pScale]," pretends to have more particles, but new particles can
	   not be added: ",lFromIntegratedOut,"->",lToIntegratedOut, " Thus the
	   model is changed."]; *)
	   RGEChangeOptions[Exp[pScale],RGEIntegratedOut->lFromIntegratedOut];
	   lToIntegratedOut=lFromIntegratedOut;
	   (*Throw[{lFromIntegratedOut,lToIntegratedOut},RGECanNotAddNewParticles];*)
	];
	If[lToIntegratedOut>lFromIntegratedOut,
		lIntegrateOut=lToIntegratedOut-lFromIntegratedOut;
			l\[Kappa]+=RGEKappaMatching[lM\[Nu]rRotated,lY\[Nu]Rotated,lIntegrateOut];
			lY\[Nu]=RGEIntegrateOutY\[Nu][lY\[Nu]Rotated, lIntegrateOut];
			lM\[Nu]r=RGEIntegrateOutM[lM\[Nu]rRotated, lIntegrateOut];
	];

        Return[{RGEg1->lg1,RGEg2->lg2,RGEg3->lg3,RGEYu->lYu,RGEYd->lYd,RGEYe->lYe,RGEY\[Nu]->lY\[Nu],RGE\[Kappa]->l\[Kappa],RGEM\[Nu]r->lM\[Nu]r}];
];



ClearAll[TransMSSM0N];
TransMSSM0N[pScale_?NumericQ,pDirection_?NumericQ,pSolution_,pToOpts_,pFromOpts_]:=Block[{lg1,lg2,lg3,lYu,lYd,lYe,lY\[Nu],lY\[Nu]Rotated,l\[Kappa],lM\[Nu]r,lM\[Nu]rRotated, lUforM},
(* make a transition from the MSSM to the MSSM w/o heavy neutrinos *)

(* calculate the new parameters *)
	{lg1,lg2,lg3,lYu,lYd,lYe,lY\[Nu],l\[Kappa],lM\[Nu]r}=(ParametersFunc[ pScale ]/.pSolution)[[1]];
	{lM\[Nu]rRotated,lY\[Nu]Rotated}=RGERotateM[ lM\[Nu]r,lY\[Nu] ]; (*rotation matrix for lM\[Nu]r*)

        l\[Kappa]+= RGEKappaMatching[lM\[Nu]rRotated,lY\[Nu]Rotated,Length[lM\[Nu]r]];

        Return[{RGEg1->lg1,RGEg2->lg2,RGEg3->lg3,RGEYu->lYu,RGEYd->lYd,RGEYe->lYe,RGE\[Kappa]->l\[Kappa]}];
];


ClearAll[Trans2HDM];
Trans2HDM[pScale_?NumericQ,pDirection_?NumericQ,pSolution_,pToOpts_,pFromOpts_]:=Block[{lg1,lg2,lg3,lYu,lYd,lYe,lY\[Nu],lY\[Nu]Rotated,l\[Kappa],lM\[Nu]r,lM\[Nu]rRotated,lIntegrateOut, lUforM,lToIntegratedOut,lFromIntegratedOut,le,lu,ld,l\[Nu],lTosb,lTocb,lsb,lcb},
(* make a transition from the MSSM to the MSSM *)

(* evaluate the options *)
(* evaluate IntegratedOut in pToOpts and pFromOpts *)
        lToOpts;
        Options[lToOpts]=Options[RGEGetModelOptions["2HDM"][[1,2]]];
        SetOptions[lToOpts,RGEFilterOptions[lToOpts,pToOpts]];
	lToIntegratedOut=RGEIntegratedOut/.Options[lToOpts,RGEIntegratedOut];
        lFromOpts;
        Options[lFromOpts]=Options[RGEOptions];
        SetOptions[lFromOpts,RGEFilterOptions[lFromOpts,pFromOpts]];
	lFromIntegratedOut=RGEIntegratedOut/.Options[lFromOpts,RGEIntegratedOut];

(* calculate the new parameters *)
	{lg1,lg2,lg3,lYu,lYd,lYe,lY\[Nu],l\[Kappa],lM\[Nu]r}=(ParametersFunc[ pScale ]/.pSolution)[[1]];
	{lM\[Nu]rRotated,lY\[Nu]Rotated}=RGERotateM[ lM\[Nu]r,lY\[Nu] ]; (*rotation matrix for lM\[Nu]r*)

	If[lFromIntegratedOut>lToIntegratedOut,
		   (* Print["The model ", RGEGetModel[Exp[pScale]], " at the
		   scale ", Exp[pScale]," pretends to have more particles, but
		   new particles can not be added:
		   ",lFromIntegratedOut,"->",lToIntegratedOut, " Thus the model
		   is changed."]; *)
		   RGEChangeOptions[Exp[pScale],RGEIntegratedOut->lFromIntegratedOut];
		   lToIntegratedOut=lFromIntegratedOut;
		   (*Throw[{lFromIntegratedOut,lToIntegratedOut},RGECanNotAddNewParticles];*)
	   ];
	If[lToIntegratedOut>lFromIntegratedOut,
		lIntegrateOut=lToIntegratedOut-lFromIntegratedOut;
                
			l\[Kappa]+=RGEKappaMatching[lM\[Nu]rRotated,lY\[Nu]Rotated,lIntegrateOut];
			lY\[Nu]=RGEIntegrateOutY\[Nu][lY\[Nu]Rotated, lIntegrateOut];
			lM\[Nu]r=RGEIntegrateOutM[lM\[Nu]rRotated, lIntegrateOut];
	];
	lcb=1/Sqrt[1+RGEtan\[Beta]^2]/.Options[lFromOpts,RGEtan\[Beta]];
	lsb=RGEtan\[Beta]/Sqrt[1+RGEtan\[Beta]^2]/.Options[lFromOpts,RGEtan\[Beta]];
	lTocb=1/Sqrt[1+RGEtan\[Beta]^2]/.Options[lToOpts,RGEtan\[Beta]];
	lTosb=RGEtan\[Beta]/Sqrt[1+RGEtan\[Beta]^2]/.Options[lToOpts,RGEtan\[Beta]];

	lu=lsb/((RGEzu/.Options[lToOpts,RGEzu]).{lTocb,lTosb});
	ld=lcb/((RGEzd/.Options[lToOpts,RGEzd]).{lTocb,lTosb});
	l\[Nu]=lsb/((RGEz\[Nu]/.Options[lToOpts,RGEz\[Nu]]).{lTocb,lTosb});
	le=lcb/lTocb;

	
        Return[{RGEg1->lg1,RGEg2->lg2,RGEg3->lg3,RGEYu->lYu*lu,RGEYd->lYd*ld,RGEYe->lYe*le,RGEY\[Nu]->lY\[Nu]*l\[Nu],RGE\[Kappa]1->(RGEz\[Nu]/.Options[lToOpts,RGEz\[Nu]])[[1]]*l\[Kappa]*(l\[Nu])^2,RGE\[Kappa]2->(RGEz\[Nu]/.Options[lToOpts,RGEz\[Nu]])[[2]]*l\[Kappa]*(l\[Nu])^2,RGEM\[Nu]r->lM\[Nu]r,RGE\[Lambda]1->(lg2^2+lg1^2)/2.,RGE\[Lambda]2->(lg2^2+lg1^2)/2.,RGE\[Lambda]3->(lg2^2-lg1^2)/4,RGE\[Lambda]4->-(lg2^2)/2,RGE\[Lambda]5->0.}];
];


ClearAll[Trans2HDM0N];
Trans2HDM0N[pScale_?NumericQ,pDirection_?NumericQ,pSolution_,pToOpts_,pFromOpts_]:=Block[{lg1,lg2,lg3,lYu,lYd,lYe,lY\[Nu],lY\[Nu]Rotated,l\[Kappa],lM\[Nu]r,lM\[Nu]rRotated, lUforM,lsb,lcb,lTosb,lTocb,lu,ld,le,l\[Nu]},
(* make a transition from the MSSM to the MSSM w/o heavy neutrinos *)

        lToOpts;
        Options[lToOpts]=Options[RGEGetModelOptions["2HDM0N"][[1,2]]];
        SetOptions[lToOpts,RGEFilterOptions[lToOpts,pToOpts]];
        lFromOpts;
        Options[lFromOpts]=Options[RGEOptions];
        SetOptions[lFromOpts,RGEFilterOptions[lFromOpts,pFromOpts]];
(* calculate the new parameters *)
	{lg1,lg2,lg3,lYu,lYd,lYe,lY\[Nu],l\[Kappa],lM\[Nu]r}=(ParametersFunc[ pScale ]/.pSolution)[[1]];
	{lM\[Nu]rRotated,lY\[Nu]Rotated}=RGERotateM[ lM\[Nu]r,lY\[Nu] ]; (*rotation matrix for lM\[Nu]r*)

        l\[Kappa]+= RGEKappaMatching[lM\[Nu]rRotated,lY\[Nu]Rotated,Length[lM\[Nu]r]];

	lcb=1/Sqrt[1+RGEtan\[Beta]^2]/.Options[lFromOpts,RGEtan\[Beta]];
	lsb=RGEtan\[Beta]/Sqrt[1+RGEtan\[Beta]^2]/.Options[lFromOpts,RGEtan\[Beta]];
	lTocb=1/Sqrt[1+RGEtan\[Beta]^2]/.Options[lToOpts,RGEtan\[Beta]];
	lTosb=RGEtan\[Beta]/Sqrt[1+RGEtan\[Beta]^2]/.Options[lToOpts,RGEtan\[Beta]];

	lu=lsb/((RGEzu/.Options[lToOpts,RGEzu]).{lTocb,lTosb});
	ld=lcb/((RGEzd/.Options[lToOpts,RGEzd]).{lTocb,lTosb});
	l\[Nu]=lsb/((RGEz\[Nu]/.Options[lToOpts,RGEz\[Nu]]).{lTocb,lTosb});
	le=lcb/lTocb;


        Return[{RGEg1->lg1,RGEg2->lg2,RGEg3->lg3,RGEYu->lYu*lu,RGEYd->lYd*ld,RGEYe->lYe*le,RGE\[Kappa]1->(RGEz\[Nu]/.Options[lToOpts,RGEz\[Nu]])[[1]]*l\[Kappa]*(l\[Nu])^2,RGE\[Kappa]2->(RGEz\[Nu]/.Options[lToOpts,RGEz\[Nu]])[[2]]*l\[Kappa]*(l\[Nu])^2,RGE\[Lambda]1->(lg2^2+lg1^2)/2.,RGE\[Lambda]2->(lg2^2+lg1^2)/2.,RGE\[Lambda]3->(lg2^2-lg1^2)/4,RGE\[Lambda]4->-(lg2^2)/2,RGE\[Lambda]5->0.}];
];


ClearAll[TransSM];
TransSM[pScale_?NumericQ,pDirection_?NumericQ,pSolution_,pToOpts_,pFromOpts_]:=Block[{lg1,lg2,lg3,lYu,lYd,lYe,lY\[Nu],lY\[Nu]Rotated,l\[Kappa],lM\[Nu]r,lM\[Nu]rRotated,lIntegrateOut, lUforM,lToIntegratedOut,lFromIntegratedOut, lsb,lcb},
(* make a transition from the MSSM to the SM *)
(* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!depends on RGESM.m !!!!!!!!!!!!!!!!!!!!!!!!!
the dependencies are marked by !!! *)


(* evaluate the options *)
(* evaluate IntegratedOut in pToOpts and pFromOpts *)
        lToOpts;
        Options[lToOpts]=Options[RGEGetModelOptions["SM"][[1,2]]];
        SetOptions[lToOpts,RGEFilterOptions[lToOpts,pToOpts]];
	lToIntegratedOut=RGEIntegratedOut/.Options[lToOpts,RGEIntegratedOut];
        lFromOpts;
        Options[lFromOpts]=Options[RGEOptions];
        SetOptions[lFromOpts,RGEFilterOptions[lFromOpts,pFromOpts]];
	lFromIntegratedOut=RGEIntegratedOut/.Options[lFromOpts,RGEIntegratedOut];
	
(* calculate the new parameters *)
	{lg1,lg2,lg3,lYu,lYd,lYe,lY\[Nu],l\[Kappa],lM\[Nu]r}=(ParametersFunc[ pScale ]/.pSolution)[[1]];
	{lM\[Nu]rRotated,lY\[Nu]Rotated}=RGERotateM[ lM\[Nu]r,lY\[Nu] ]; (*rotation matrix for lM\[Nu]r*)

	If[lFromIntegratedOut>lToIntegratedOut,
		   (* Print["The model ", RGEGetModel[Exp[pScale]], " at the
		   scale ", Exp[pScale]," pretends to have more particles, but
		   new particles can not be added:
		   ",lFromIntegratedOut,"->",lToIntegratedOut, " Thus the model
		   is changed."]; *)
		   RGEChangeOptions[Exp[pScale],RGEIntegratedOut->lFromIntegratedOut];
		   lToIntegratedOut=lFromIntegratedOut;
		   (*Throw[{lFromIntegratedOut,lToIntegratedOut},RGECanNotAddNewParticles];*)
	   ];
	If[lToIntegratedOut>lFromIntegratedOut,
		lIntegrateOut=lToIntegratedOut-lFromIntegratedOut;

			l\[Kappa]+= RGEKappaMatching[lM\[Nu]rRotated,lY\[Nu]Rotated,lIntegrateOut];
			lY\[Nu]= RGEIntegrateOutY\[Nu][lY\[Nu]Rotated, lIntegrateOut];
			lM\[Nu]r= RGEIntegrateOutM[lM\[Nu]rRotated, lIntegrateOut];
	];
	lcb=1/Sqrt[1+RGEtan\[Beta]^2]/.Options[lFromOpts,RGEtan\[Beta]];
	lsb=RGEtan\[Beta]/Sqrt[1+RGEtan\[Beta]^2]/.Options[lFromOpts,RGEtan\[Beta]];

Print["Note that no matching of DRbar to MSbar and no SUSY threshold corrections are implemented in contrast to MSSM0N"];
	Return[{RGEg1->lg1,RGEg2->lg2,RGEg3->lg3,RGEYu->lYu*lsb,RGEYd->lYd*lcb,RGEYe->lYe*lcb,RGEY\[Nu]->lY\[Nu]*lsb,RGE\[Kappa]->l\[Kappa]*(lsb)^2,RGEM\[Nu]r->lM\[Nu]r,RGE\[Lambda]->(RGE\[Lambda]/.Options[lToOpts,RGE\[Lambda]])}];
];




ClearAll[TransSM0N];
TransSM0N[pScale_?NumericQ,pDirection_?NumericQ,pSolution_,pToOpts_,pFromOpts_]:=Block[{lg1,lg2,lg3,lYu,lYd,lYe,lY\[Nu],lY\[Nu]Rotated,l\[Kappa],lM\[Nu]r,lM\[Nu]rRotated, lUforM,lsb,lcb},
(* make a transition from the MSSM to the SM w/o heavy neutrinos *)
(* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!depends on RGESM.m !!!!!!!!!!!!!!!!!!!!!!!!!
the dependencies are marked by !!! *)


        lFromOpts;
        Options[lFromOpts]=Options[RGEOptions];
        SetOptions[lFromOpts,RGEFilterOptions[lFromOpts,pFromOpts]];
        lToOpts;
        Options[lToOpts]=Options[RGEGetModelOptions["SM0N"][[1,2]]];
        SetOptions[lToOpts,RGEFilterOptions[lToOpts,pToOpts]];
(* calculate the new parameters *)

	{lg1,lg2,lg3,lYu,lYd,lYe,lY\[Nu],l\[Kappa],lM\[Nu]r}=(ParametersFunc[ pScale ]/.pSolution)[[1]];
	{lM\[Nu]rRotated,lY\[Nu]Rotated}=RGERotateM[ lM\[Nu]r,lY\[Nu] ]; (*rotation matrix for lM\[Nu]r*)

	l\[Kappa]+= RGEKappaMatching[lM\[Nu]rRotated,lY\[Nu]Rotated,Length[lM\[Nu]r]];

	lcb=1/Sqrt[1+RGEtan\[Beta]^2]/.Options[lFromOpts,RGEtan\[Beta]];
	lsb=RGEtan\[Beta]/Sqrt[1+RGEtan\[Beta]^2]/.Options[lFromOpts,RGEtan\[Beta]];
Print["Note that no matching of DRbar to MSbar and no SUSY threshold corrections are implemented in contrast to MSSM0N"];

Return[{RGEg1->lg1,RGEg2->lg2,RGEg3->lg3,RGEYu->lYu*lsb,RGEYd->lYd*lcb,RGEYe->lYe*lcb,RGE\[Kappa]->l\[Kappa]*(lsb)^2,RGE\[Lambda]->(RGE\[Lambda]/.Options[lToOpts,RGE\[Lambda]])}];
];




(* internal functions *)

ClearAll[ParametersFunc];
ParametersFunc[pScale_]:={g1[pScale],g2[pScale],g3[pScale],Yu[pScale],Yd[pScale],Ye[pScale],Y\[Nu][pScale],\[Kappa][pScale],M\[Nu]r[pScale]};

ClearAll[SetInitial];
SetInitial[pBoundary_?NumericQ,pInitial_]:=Block[{},
(* sets the initial values *)
   Return[		{g1[pBoundary]==RGEg1,
			g2[pBoundary]==RGEg2,
			g3[pBoundary]==RGEg3,
			Yu[pBoundary]==RGEYu,
			Yd[pBoundary]==RGEYd,
			Ye[pBoundary]==RGEYe,
			Y\[Nu][pBoundary]==RGEY\[Nu],
			\[Kappa][pBoundary]==RGE\[Kappa],
			M\[Nu]r[pBoundary]==RGEM\[Nu]r
			}//.pInitial
			];
];

End[]; (* end of `Private`*)


EndPackage[];
