#################################################################################################
# The package `REAP' is written for Mathematica 7 and is distributed under the
# terms of GNU Public License http://www.gnu.org/copyleft/gpl.html
#################################################################################################

<function name=Definitions>
<code>
(*shortcuts*)
ClearAll[Dagger];
Dagger[x_] := Transpose[Conjugate[x]];
</code>
</function>

<function name=RGEIntegrateOutM>
<head>
RGEIntegrateOutM::usage="RGEIntegrateOutM[M,Num] integrates out the heaviest <Num> degrees of freedom of M.";
</head>
<doc level=advanced>
\function{RGEIntegrateOutM[\param{M},\param{to be integrated out}]} removes the
rows and columns which are given in \param{to be integrated out} in \param{M}.
<example>
\begin{verbatim}
  M=RGEIntegratedOutM[M,2];
\end{verbatim}
removes the last 2 rows and columns of M.
</example>
</doc>
<code>
RGEIntegrateOutM[pM_,pNum_]:=Block[{lf,lg,lLen},
(* Integrates out the number of degrees of freedom in pM given in pNum *)
   lLen=Length[pM]-pNum;
   Return[Table[pM[[lf,lg]],{lf,lLen},{lg,lLen}]];
];
</code>
</function>

<function name=RGEIntegrateOutY\[Nu]>
<head>
RGEIntegrateOutY\[Nu]::usage="RGEIntegrateOutY\[Nu][Y\[Nu],Num] integrates out <Num> degrees of freedom in Y\[Nu]";
</head>
<doc level=advanced>
\function{RGEIntegrateOutY$\nu$[\param{Y$\nu$},\param{to be integrated out}]}
removes the rows which are given in \param{to be integrated out} in
\param{Y$\nu$}.
<example>
\begin{verbatim}
  Y=RGEIntegratedOutY\[Nu][Y,2];
\end{verbatim}
removes the last 2 rows of Y.
</example>
</doc>
<code>
RGEIntegrateOutY\[Nu][pY\[Nu]_,pNum_]:=Block[{lf,lg,lx,ly},
(* Integrates out the number of degrees of freedom in pY\[Nu] given in pNum *)
   {lRow,lColumn}=Dimensions[pY\[Nu]];
   Return[Table[pY\[Nu][[lf,lg]],{lf,lRow-pNum},{lg,lColumn}]];
];
</code>
</function>

<function name=RGETestMY\[Nu]>
<head>
RGETestMY\[Nu]::usage="RGETestMY\[Nu][scale,M,Y\[Nu],\[Kappa]] integrates out the degrees of freedom in M which are above scale and returns {M,Y\[Nu],\[Kappa],number of dof which are integrated out} ";
</head>
<doc level=advanced>
\function{RGETestMY$\nu$[\param{scale},\param{M},\param{$Y_\nu$},\param{$\kappa$}]}
integrates out the degrees of freedom in M which are above scale and returns
{M,Y$\nu$,$\kappa$,number of degrees of freedom which are integrated out}

This function is useful to test whether right-handed neutrinos are already too heavy to be excited and therefore should already be integrated out.
It can be used to check your initial values. The package checks whether there are right-handed neutrinos which are heavier than the initial scale. These are automatically integrated out and a warning is given.
</doc>
<code>
RGETestMY\[Nu][pScale_,pM_,pY\[Nu]_,p\[Kappa]_]:=Block[{lM\[Nu]Rotated,lY\[Nu]Rotated,lIntegrateOut,lY\[Nu],lM,lU,l\[Kappa]},
	l\[Kappa]=p\[Kappa];
	lY\[Nu]=pY\[Nu];
	lM=pM;
	lIntegrateOut=Length[Select[RGEEigenvalues[lM],(#1>pScale)&]];
	If[lIntegrateOut>0,
		{lM\[Nu]Rotated,lY\[Nu]Rotated}=RGERotateM[lM,lY\[Nu]];
		l\[Kappa]+= RGEKappaMatching[lM\[Nu]Rotated,lY\[Nu]Rotated,lIntegrateOut];
		lY\[Nu]= RGEIntegrateOutY\[Nu][lY\[Nu]Rotated, lIntegrateOut];
		lM= RGEIntegrateOutM[lM\[Nu]Rotated, lIntegrateOut];
	];
	Return[{lM,lY\[Nu],l\[Kappa],lIntegrateOut}];
];

</code>
</function>

<function name=RGEKappaMatching>
<head>
RGEKappaMatching::usage="RGEKappaMatching[M,Y\[Nu],IntOut]  does the \[Kappa] matching at transitions where a right-handed neutrino is integrated out. The matrices have to be in a basis where M is diagonal.";
</head>
<doc level=advanced
\function{RGEKappaMatching[\param{$Y_\nu$},\param{M},\param{NumIntOut}]} matches
$\kappa$ of the effective theory to the underlying effective (``full'') theory.
It returns $2\hat{Y_\nu}^T \hat{M}^{-1}\hat{Y_\nu}$, whereby $\hat{M}$ is the
submatrix of M consisting of the last \param{NumIntOut} rows and columns and
$\hat{Y_\nu}$ is a matrix which consists of the last \param{NumIntOut} rows of
$Y_\nu$. M has to be a diagonal matrix.
<example>
\begin{verbatim}
  RGEKappaMatching[{{1,0},{0,2}},{{1,1},{1,0}},1];
\end{verbatim}
returns
\begin{equation*}
2\cdot\frac{1}{1}\cdot \left(
\begin{array}{c}
  0\\ 2\\
\end{array}
\right) \left(
\begin{array}{cc}
  0 & 2\\
\end{array}
\right) =\left(
\begin{array}{cc}
  0 &0\\ 0 & 8\\
\end{array}
\right)
\end{equation*}
</example>
</doc>
<code>
RGEKappaMatching[pM_,pY\[Nu]_,pNum_]:=Block[{li,lIntOut},
(* does the \[Kappa] matching at the transitions *)
	li=Length[pM];
        lIntOut=Range[li-pNum+1,li];

	If[MatrixConditionNumber[pM[[lIntOut,lIntOut]]]>2*Precision[pM[[lIntOut,lIntOut]]],
		Print["RGEKappaMatching: The matrix M=", MatrixForm[ pM[[lIntOut,lIntOut]] ]," is ill-conditioned and the condition number is ",MatrixConditionNumber[ pM[[lIntOut,lIntOut]] ] ]];
	Return[2*Transpose[pY\[Nu][[lIntOut]]].Inverse[pM[[lIntOut,lIntOut]]].pY\[Nu][[lIntOut]]];
];
</code>
</function>

<function name=RGEGetNeutrinoMasses>
<head>
RGEGetNeutrinoMasses::usage="RGEGetNeutrinoMasses[MassHierarchy,\[CapitalDelta]m2atm,\[CapitalDelta]m2sol,Mlightest]
converts its arguments into a list containing the neutrino mass eigenvalues.";
</head>
<doc level=advanced>
\function{RGEGetNeutrinoMasses[\param{MassHierarchy},\param{$\Delta
m^2_\mathrm{atm}$},\param{$\Delta m^2_\mathrm{sol}$},\param{Mlightest}]}
converts its arguments into a list containing the neutrino mass eigenvalues $m_1,m_2,m_3$.
</doc>
<code>
RGEGetNeutrinoMasses[pMassHierarchy_,p\[CapitalDelta]atm_,p\[CapitalDelta]sol_,pMlightest_]:=Block[{lM1,lM2,lM3,lSolM2},
    Which[pMassHierarchy=="i",
             lM3 = pMlightest;
	     lM2 = lM3^2 + p\[CapitalDelta]atm;
	     lM1 = Sqrt[lM2 - p\[CapitalDelta]sol];
	     lM2 = Sqrt[lM2],
           pMassHierarchy=="r"||pMassHierarchy=="n",
             lM1 = pMlightest;
	     lM2 = lM1^2 + p\[CapitalDelta]sol;
	     lM3 = Sqrt[lM2 + p\[CapitalDelta]atm];
	     lM2 = Sqrt[lM2],
           True, Throw[pMassHierarchy,RGENotAValidMassHierarchy]
    ];
    Return[{lM1,lM2,lM3}];
];
</code>
</function>

<function name=RGERotateM>
<head>
RGERotateM::usage="RGERotateM[M,Y] changes the basis to the eigenstates of M and returns M and Y in that basis";
</head>
<doc level=advanced>
\function{RGERotateM[\param{M},\param{Y}]} changes the basis to the eigensystem
of \param{M} and returns \param{M} and \param{Y} in that basis.
</doc>
<code>
RGERotateM[pM_, pY_] := 
  Block[{lU, lM,lord,MM,scale},
  (*returns pM and pY in the basis where pM is diagonal*)
  scale=Sqrt[Max[Abs[pM]]*Min[Select[Flatten[Abs[pM]], # > 0 &]]];
  MM=pM/scale;
  {lU, lM} = RGETakagiDecomposition[MM];
  lM=lM*scale;
  (* smallest to largest mass *)
   lord=Ordering[Diagonal[lM]];
   lU=lU[[lord]];
   Return[{lM[[lord,lord]], lU.pY}];
   ];
</code>
</function>



<function name=RGESearchTransitions>
<head>
RGESearchTransitions::usage="RGESearchTransitions[Mass,LogScale,MaxLogScale,Min,Options] returns a list of transitions which are found by integrating out degrees of freedom. Mass is a function returning the mass matrix at a given scale and LogScale, MaxLogScale and MinLogScale are the starting point, the maximum and the minimum respectively.";
Options[RGESearchTransitions]={
    RGEPrecision->6,
    RGEMaxNumberIterations->20,
    RGEThresholdFactor->1
};
</head>
<doc level=advanced>
  \function{RGESearchTransitions[\param{Mass},\param{LogScale},\param{MaxLogScale},\param{Min},\optparam{Options}]}\label{SearchTransition}
  returns a list of transitions which are found by integrating out degrees of
  freedom. \param{Mass} is a function returning the mass matrix at a given scale
  and \param{LogScale}, \param{MaxLogScale} and \param{MinLogScale} are the
  starting point, the maximum and the minimum respectively.\\ Options of
  \function{RGESearchTransitions} are
  \begin{itemize}
    \item RGEPrecision is the precision used by \function{RGESearchTransitions}
    (default: 6)
    \item RGEMaxNumberIterations is the maximum number of iterations in the
    algorthm used to find a transition.(default: 20)
    \item RGEThresholdFactor determines when degrees of freedom are integrated
    out: RGEThresholdFactor*Mass=Scale where degree of freedom is integrated out
    (default: 1)
  \end{itemize}
<implementation>
    The transitions are found by a fixed-point iteration.  This algorithm will be
convergent by the Banach fixed-point theorem if the Lipschitz constant of the function $x\rightarrow
Max(Eigenvalues(Mass(x)))$ is less than 1 for the relevant interval between
the starting point and the fixed-point.  e.g. to find the scale where a heavy
right-handed neutrino is integrated out. The fixed-point algorithm in
\function{SearchTransitions} does the following steps:
\begin{enumerate}
  \item obtain the right-handed neutrino mass matrix at the starting point
  \item calculate eigenvalues
  \item find the largest eigenvalue
  \item repeat the procedure with the largest eigenvalue as starting point until
    the new largest eigenvalue equals the starting point.
\end{enumerate}
</implementation>
</doc>
<code>
RGESearchTransitions[pMass_,pLogScale_?NumericQ,pMaxLogScale_?NumericQ,pMinLogScale_?NumericQ,pOpts___]:=Block[{
lTransitions, (* list of found transitions *)
lNewLogScale, (* used to search transitions *)
lOldLogScale, (* used to search transitions *)
lPrecision, (* precision used in searching transitions *)
lCount, (* number of iterations *)
lCountMax, (* maximum number of iterations *)
lLengthM, (* number of particles *)
lM, (* mass matrix *)
lAbsEVal, (* absolut value of the eigenvalues of neutrino mass matrix *)
li, (* variable used in loops *)
lLogThresholdFactor, (* neutrinos are integrated out below their mass; this is the shift *)
lBelowMinimum, (* Signal to indicate if the minimum is reached *)
lMinLogScale (* lower bound *)
},
(* search for transitions *)
(* exceptions: mass out of range --> RGEOutOfRange
*)
    lBelowMinimum;
    lMinLogScale=pMinLogScale;
    lTransitions={};
    lPrecision=RGEPrecision/.{RGEFilterOptions[RGESearchTransitions,pOpts]}/.Options[RGESearchTransitions,RGEPrecision];
    lCountMax=RGEMaxNumberIterations/.{RGEFilterOptions[RGESearchTransitions,pOpts]}/.Options[RGESearchTransitions,RGEMaxNumberIterations];
    lOldLogScale=pLogScale;
    lM=pMass[lOldLogScale];
    lLengthM=Length[lM];
    lAbsEVal=RGEEigenvalues[lM];
    lNewLogScale=Log[Max[lAbsEVal]];
    Catch[
    If[lNewLogScale>pMaxLogScale,
       lNewLogScale=RGEFloor[lNewLogScale,RGEPrecision->lPrecision];
       If[lNewLogScale>pMaxLogScale, Throw[{lNewLogScale,pMaxLogScale},RGEOutOfRange]];
       ];
    If[lNewLogScale<lMinLogScale,Throw[lNewLogScale,lBelowMinimum]];
       (* search transitions *)
    For[li=1,li<=lLengthM,li++,
         lCount=0;
         lOldLogScale=lNewLogScale;
         lM=pMass[lOldLogScale];
         lLengthM=Length[lM];
         lAbsEVal=RGEEigenvalues[lM];
         lNewLogScale=Log[Sort[lAbsEVal,Greater][[li]]];
         If[lNewLogScale>pMaxLogScale,
            lNewLogScale=RGEFloor[lNewLogScale,RGEPrecision->lPrecision];
            If[lNewLogScale>pMaxLogScale,Throw[0,RGEOutOfRange]];
         ];
         If[lNewLogScale<lMinLogScale,Throw[lNewLogScale,lBelowMinimum]];
         While[Abs[SetPrecision[lOldLogScale,lPrecision]-SetPrecision[lNewLogScale,lPrecision]]>0,
            lOldLogScale=lNewLogScale;
            lM=pMass[lOldLogScale];
            lAbsEVal=RGEEigenvalues[lM];
            lNewLogScale=Log[Sort[lAbsEVal,Greater][[li]]];
            lCount++;
            If[lNewLogScale>pMaxLogScale,
               lNewLogScale=RGEFloor[lNewLogScale,RGEPrecision->lPrecision];
               If[lNewLogScale>pMaxLogScale,Throw[0,RGEOutOfRange]];
            ];
            If[lNewLogScale<lMinLogScale,Throw[lNewLogScale,lBelowMinimum]];
            If[lCount>lCountMax,
                Print["RGESearchTransitions: algorithm to search transitions does not converge. There have been ",lCount," iterations so far. Returning: ",N[Sort[lTransitions,Greater],lPrecision]];
                Return[N[Sort[lTransitions,Greater],lPrecision]];
(*               Throw[N[Sort[lTransitions,Greater],lPrecision],RGETooManyIterations]];*)
            ]];
         lTransitions=Append[lTransitions,lNewLogScale];
         If[li==1,
              lMinLogScale=First[lTransitions]+Log[RGEThresholdFactor]/.{RGEFilterOptions[RGESearchTransitions,pOpts]}/.Options[RGESearchTransitions,RGEThresholdFactor]
         ];
   ],
   lBelowMinimum];
   Return[N[Sort[lTransitions,Greater],lPrecision]];
];
</code>
</function>

<function name=RGEFloor>
<head>
RGEFloor::usage="RGEFloor[value,opts] returns <value> rounded to RGEPrecision which is given as an option <opts>.";
Options[RGEFloor]={RGEPrecision->6};
</head>
<doc level=internal>
\function{RGEFloor[\param{value},\param{options}]} returns value rounded to
  RGEPrecision which is given as an option.  The only option of
  \function{RGEFloor} is RGEPrecision, which is the precision used by
  \function{RGEFloor}. (default:6)
</doc>
<code>
RGEFloor[pValue_,pOpts___]:=Block[{lValue,lPrecision},
    {lMantissa,lExponent}=MantissaExponent[pValue,10];
    lPrecision=RGEPrecision/.{RGEFilterOptions[RGEFloor,pOpts]}/.Options[RGEFloor,RGEPrecision];
    Return[N[lMantissa-10^-{lPrecision},lPrecision]*10^lExponent];
];
</code>
</function>

<function name=RGEGetRightHanded\[Nu]Masses>
<head>
RGEGetRightHanded\[Nu]Masses::usage="RGEGetRightHanded\[Nu]Masses[Scale] returns the
right-handed neutrino masses in a list, which is ordered by increasing
mass. <Scale> is the scale at which the returned right-handed neutrino masses
are defined.";
</head>
<doc level=simple>
\function{RGEGetRightHanded$\nu$Masses[\param{Scale}]} returns the
right-handed neutrino masses in a list, which is ordered by increasing
mass. \param{Scale} is the scale at which the returned right-handed neutrino masses
are defined.
</doc>
<code>
RGEGetRightHanded\[Nu]Masses[pScale_]:=Block[{lM},
	lM=RGEGetSolution[pScale,RGEM\[Nu]r];
	Return[Sort[RGEEigenvalues[lM], Less]];
];
</code>
</function>
